{{add-listener
  this.landscapeRestructure
  'restructureLandscapeData'
  this.renderingService.triggerRenderingForGivenLandscapeData
}}
{{add-listener
  this.landscapeRestructure
  'openSettingsSidebar'
  this.openSettingsSidebar
}}
{{add-listener
  this.landscapeRestructure
  'restructureComponent'
  this.toggleSettingsSidebarComponent
}}
{{add-listener
  this.landscapeRestructure
  'toggelVisualization'
  this.renderingService.toggleVisualizationUpdating
}}

{{did-insert this.initRenderingAndSetupListeners}}

<AutoJoinLobby @roomId={{this.roomId}} />

<div id='vizspace' {{sync-state}}>

  {{! Loading screen }}
  {{#unless this.allLandscapeDataExistsAndNotEmpty}}
    <div class='container-fluid mt-6'>
      <div class='jumbotron'>
        {{#if this.isLandscapeExistentAndEmpty}}
          <h2>Empty Landscape received!</h2>
        {{else}}
          <h2>No Landscape found!</h2>
        {{/if}}
        <p>A new landscape will be fetched every 10 seconds.</p>
      </div>
      <div class='spinner-center-3' role='status'></div>
    </div>
  {{/unless}}

  {{! Rendering mode }}
  {{#if this.showAR}}
    <ArRendering
      @id='ar-rendering'
      @landscapeData={{this.renderingService.landscapeData}}
      @switchToOnScreenMode={{this.switchToOnScreenMode}}
      @toggleVisualizationUpdating={{this.renderingService.toggleVisualizationUpdating}}
      @visualizationPaused={{this.renderingService.visualizationPaused}}
      @openedSettingComponent={{this.sidebarHandler.openedSettingComponent}}
      @toggleSettingsSidebarComponent={{this.sidebarHandler.toggleSettingsSidebarComponent}}
      @showSettingsSidebar={{this.sidebarHandler.showSettingsSidebar}}
      @openSettingsSidebar={{this.sidebarHandler.openSettingsSidebar}}
      @closeSettingsSidebar={{this.sidebarHandler.closeSettingsSidebar}}
    />

  {{else}}
    {{#if this.showVR}}

      <VrRendering
        @id='vr-rendering'
        @landscapeData={{this.renderingService.landscapeData}}
        @switchToOnScreenMode={{this.switchToOnScreenMode}}
        @debugMode={{this.userSettings.applicationSettings.showVrOnClick.value}}
      />

    {{else}}
      <Visualization::Rendering::BrowserRendering
        @addComponent={{this.addComponent}}
        @applicationArgs={{this.applicationArgs}}
        @closeDataSelection={{this.closeDataSelection}}
        @closeToolsSidebar={{this.sidebarHandler.closeToolsSidebar}}
        @closeSettingsSidebar={{this.sidebarHandler.closeSettingsSidebar}}
        @components={{this.components}}
        @componentsToolsSidebar={{this.componentsToolsSidebar}}
        @id='browser-rendering'
        @isDisplayed={{this.allLandscapeDataExistsAndNotEmpty}}
        @landscapeData={{this.renderingService.landscapeData}}
        @landscapeToken={{this.landscapeTokenService.token}}
        @openedSettingComponent={{this.sidebarHandler.openedSettingComponent}}
        @openedToolComponent={{this.sidebarHandler.openedToolComponent}}
        @openSettingsSidebar={{this.sidebarHandler.openSettingsSidebar}}
        @openToolsSidebar={{this.sidebarHandler.openToolsSidebar}}
        @pauseVisualizationUpdating={{this.pauseVisualizationUpdating}}
        @removeTimestampListener={{this.removeTimestampListener}}
        @removeToolsSidebarComponent={{this.sidebarHandler.removeToolsSidebarComponent}}
        @restructureLandscape={{this.restructureLandscape}}
        @showSettingsSidebar={{this.sidebarHandler.showSettingsSidebar}}
        @showToolsSidebar={{this.sidebarHandler.showToolsSidebar}}
        @snapshot={{this.snapshotTokenService.snapshotSelected}}
        @snapshotReload={{this.snapshotTokenService.snapshotToken}}
        @switchToAR={{this.switchToAR}}
        @triggerRenderingForGivenLandscapeData={{this.renderingService.triggerRenderingForGivenLandscapeData}}
        @toggleSettingsSidebarComponent={{this.sidebarHandler.toggleSettingsSidebarComponent}}
        @toggleToolsSidebarComponent={{this.sidebarHandler.toggleToolsSidebarComponent}}
        @toggleVisualizationUpdating={{this.toggleVisualizationUpdating}}
        @updateLandscape={{this.updateLandscape}}
        @userApiTokens={{this.userApiTokens}}
        @visualizationPaused={{this.visualizationPaused}}
      />
    {{/if}}
  {{/if}}
</div>

{{! Bottom Bar }}
{{#if this.shouldDisplayBottomBar}}
  <div id='bottom-bar-container'>

    {{! Toggle Bottom Bar Button}}
    <BsButton
      @onClick={{this.toggleVisibilityBottomBar}}
      @type='secondary'
      @outline={{true}}
      class='bottom-bar-toggle-btn'
      title={{if this.isBottomBarMaximized 'Hide Bottom Bar' 'Show Bottom Bar'}}
    >

      {{#unless this.isBottomBarMaximized}}
        <span class='pr-1'>Bottom Bar</span>
      {{/unless}}
      {{svg-jar
        'chevron-up-16'
        id='hide-bottom-bar-icon'
        class=(if
          this.isBottomBarMaximized
          'octicon align-middle hide-bottom-bar-icon-down'
          'octicon align-middle'
        )
      }}
    </BsButton>

    {{! VR Button}}
    {{#if
      (and
        this.userSettings.applicationSettings.showVrButton.value
        (not this.showVR)
      )
    }}
      <button
        class='bottom-bar-vr-button'
        type='button'
        {{did-insert this.updateVrStatus}}
        {{on 'click' this.switchToVR}}
      >
        {{this.vrButtonText}}
      </button>
    {{/if}}

    {{! Runtime / Code Charts}}
    <div
      id='bottom-bar-chart-container'
      class='bottom-bar-chart
        {{if
          (and this.isCommitTreeSelected this.isBottomBarMaximized)
          "bottom-bar-chart-commitTree"
        }}
        {{unless this.isBottomBarMaximized "bottom-bar-chart-hide"}}'
    >

      <div id='bottom-bar-chart-button-div'>
        <BsButton
          id='bottom-bar-toggle-chart-button'
          @onClick={{this.toggleBottomChart}}
          @outline={{true}}
          class='bottom-bar-chart-button'
        >
          {{if this.isRuntimeTimelineSelected 'Show Commit Chart'}}
          {{if this.isCommitTreeSelected 'Show Runtime Chart'}}
        </BsButton>
      </div>

      {{#if this.isRuntimeTimelineSelected}}
        <Visualization::PageSetup::BottomBar::Runtime::PlotlyTimeline
          @timelineDataObject={{this.timelineDataObjectHandler.timelineDataObject}}
          @clicked={{this.timelineDataObjectHandler.timelineClicked}}
        />
      {{/if}}

      {{#if this.isCommitTreeSelected}}
        <div class='row justify-content-md-center'>
          <Visualization::PageSetup::BottomBar::Evolution::CommitTreeApplicationSelection
            @appNameCommitTreeMap={{this.evolutionDataRepository.appNameCommitTreeMap}}
            @selectedAppName={{this.commitTreeStateService.currentSelectedApplicationName}}
            @setSelectedAppName={{this.commitTreeStateService.setCurrentSelectedApplicationName}}
          />
          <Visualization::PageSetup::BottomBar::Evolution::EvolutionRenderingButtons
            @selectedAppName={{this.commitTreeStateService.currentSelectedApplicationName}}
            @selectedCommits={{this.commitTreeStateService.selectedCommits}}
          />
        </div>
        <Visualization::PageSetup::BottomBar::Evolution::PlotlyCommitTree
          @appNameCommitTreeMap={{this.evolutionDataRepository.appNameCommitTreeMap}}
          @triggerVizRenderingForSelectedCommits={{this.renderingService.triggerRenderingForSelectedCommits}}
          @selectedAppName={{this.commitTreeStateService.currentSelectedApplicationName}}
          @selectedCommits={{this.commitTreeStateService.selectedCommits}}
          @setSelectedCommits={{this.commitTreeStateService.setSelectedCommits}}
          @getCloneOfAppNameAndBranchNameToColorMap={{this.commitTreeStateService.getCloneOfAppNameAndBranchNameToColorMap}}
          @setAppNameAndBranchNameToColorMap={{this.commitTreeStateService.setAppNameAndBranchNameToColorMap}}
        />
      {{/if}}

    </div>
  </div>
{{/if}}

<Visualization::Rendering::PlayPauseButton />