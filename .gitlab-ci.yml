include:
  - project: 'ExplorViz/code/deployment'
    file: '.gitlab-ci-explorviz-common.yml'

default:
  tags:
    - exec-docker
  image: explorviz/build-images:frontend-v20.11.0-debian
  cache: # Cache modules in between jobs
    key: $CI_COMMIT_REF_SLUG
    paths:
      - .npm/

stages:
  - code-analysis
  - test
  - build
  - deploy:images
  - deploy:retagging

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "web"
    - if: $CI_PIPELINE_SOURCE == "pipeline"
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_BRANCH

linting:
  stage: code-analysis
  before_script:
    - node --version
    - npm --version
    - npm install
  script:
    - npm run lint
  artifacts:
    expire_in: 1h
    paths:
      - node_modules

test:
  stage: test
  script:
    - ember test

.build:
  stage: build
  variables:
    VERSION_TAG: $CI_COMMIT_BRANCH-$CI_COMMIT_SHORT_SHA
  script:
    - ember build --prod
  artifacts:
    expire_in: 1h
    paths:
      - node_modules
      - dist

build-prod:
  extends:
    - .build
  rules:
    - if: '$CI_PIPELINE_SOURCE != "schedule"'

build-prod-noauth:
  extends:
    - .build
  variables:
    VERSION_TAG: $CI_COMMIT_BRANCH-noauth-$CI_COMMIT_SHORT_SHA
  rules:
    - if: '$CI_PIPELINE_SOURCE != "schedule"'
  before_script:
    - export AUTH0_ENABLED=false

.deploy-to-dockerhub:
  stage: deploy:images
  variables:
    DOCKERHUB_TAG: 'latest'
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: ['']
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CONTAINER_REGISTRY_URL\":{\"auth\":\"$(echo -n ${DOCKERHUB_USERNAME}:${DOCKERHUB_PASSWORD} | base64)\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context=$CI_PROJECT_DIR --dockerfile=$CI_PROJECT_DIR/Dockerfile --destination=$DOCKERHUB_ORGANIZATION/$DOCKERHUB_IMAGE_NAME:$DOCKERHUB_TAG

deploy-main-amd64:
  extends:
    - .deploy-to-dockerhub
  dependencies:
    - build-prod
  variables:
    DOCKERHUB_TAG: 'amd64'
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_PIPELINE_SOURCE != "schedule" && $CI_COMMIT_BRANCH == "main"'

deploy-main-arm64:
  extends:
    - .deploy-to-dockerhub
  dependencies:
    - build-prod
  tags:
    - 'arm64'
  variables:
    DOCKERHUB_TAG: 'arm64'
  rules:
    - if: $MULTI_ARCH_BUILD

deploy-dev-noauth-amd64:
  extends:
    - .deploy-to-dockerhub
  dependencies:
    - build-prod-noauth
  variables:
    DOCKERHUB_TAG: 'dev-noauth-amd64'
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_PIPELINE_SOURCE != "schedule" && $CI_COMMIT_BRANCH == "main"'

deploy-dev-noauth-arm64:
  extends:
    - .deploy-to-dockerhub
  dependencies:
    - build-prod-noauth
  tags:
    - 'arm64'
  variables:
    DOCKERHUB_TAG: 'dev-noauth-arm64'
  rules:
    - if: $MULTI_ARCH_BUILD

deploy-merge-request:
  extends:
    - .deploy-to-dockerhub
  dependencies:
    - build-prod
  variables:
    DOCKERHUB_TAG: mr-$CI_MERGE_REQUEST_IID
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"'

deploy-merge-request-noauth:
  extends:
    - .deploy-to-dockerhub
  dependencies:
    - build-prod-noauth
  variables:
    DOCKERHUB_TAG: mr-$CI_MERGE_REQUEST_IID-noauth
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"'

retag-main-amd64-as-latest:
  extends: .retag-dockerhub-image
  rules:
    - if: $MULTI_ARCH_BUILD
      when: never
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_PIPELINE_SOURCE != "schedule" && $CI_COMMIT_BRANCH == "main"'
    - if: '$CI_PIPELINE_SOURCE == "pipeline"'
  variables:
    SOURCE_TAG: 'amd64'
    TARGET_TAG: 'latest'
  cache:

retag-dev-noauth-amd64:
  extends: .retag-dockerhub-image
  rules:
    - if: $MULTI_ARCH_BUILD
      when: never
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_PIPELINE_SOURCE != "schedule" && $CI_COMMIT_BRANCH == "main"'
    - if: '$CI_PIPELINE_SOURCE == "pipeline"'
  variables:
    SOURCE_TAG: 'dev-noauth-amd64'
    TARGET_TAG: 'dev-noauth'
  cache:

publish-multi-arch-latest:
  extends: .retag-as-multi-arch-dockerhub-image
  cache:

publish-multi-arch-dev-noauth:
  variables:
    TAG_PREFIX: 'dev-noauth-'
  extends: .retag-as-multi-arch-dockerhub-image
  cache:
