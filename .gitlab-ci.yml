default:
  tags:
    - exec-docker
  image: explorviz/build-images:frontend-v20.11.0
  cache: # Cache modules in between jobs
    key: $CI_COMMIT_REF_SLUG
    paths:
      - .npm/

stages:
  - code-analysis
  - test
  - build
  - deploy:images
  - deploy:retagging

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never
    - if: '$CI_COMMIT_BRANCH'

linting:
  stage: code-analysis
  before_script:
    - node --version
    - npm --version
    - npm cache clean -f
    - if [ -d .npm ]; then
       rm -rf .npm/_libvips;
      fi
    - npm -g uninstall libvips
    - npm install --unsafe-perm
  script:
    - npm run lint
  artifacts:
    expire_in: 1h
    paths:
      - node_modules

test:
  stage: test
  script:
    - ember test

.build:
  stage: build
  variables:
    VERSION_TAG: $CI_COMMIT_BRANCH-$CI_COMMIT_SHORT_SHA
  script:
    - ember build --prod
  artifacts:
    expire_in: 1h
    paths:
      - node_modules
      - dist

build-prod:
  extends:
    - .build
  rules:
    - if: '$CI_PIPELINE_SOURCE != "schedule"'

build-prod-noauth:
  extends:
    - .build
  variables:
    VERSION_TAG: $CI_COMMIT_BRANCH-noauth-$CI_COMMIT_SHORT_SHA
  rules:
    - if: '$CI_PIPELINE_SOURCE != "schedule"'
  before_script:
    - export AUTH0_ENABLED=false

.deploy-to-dockerhub:
  stage: deploy:images
  variables:
    DOCKERHUB_TAG: 'latest'
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: ['']
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(echo -n ${DOCKERHUB_USER}:${DOCKERHUB_PASSWORD} | base64)\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context=$CI_PROJECT_DIR --dockerfile=$CI_PROJECT_DIR/Dockerfile --destination=$DOCKERHUB_ORGA/$DOCKERHUB_IMAGE_NAME:$DOCKERHUB_TAG

deploy-dockerhub-master:
  extends:
    - .deploy-to-dockerhub
  dependencies:
    - build-prod
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_PIPELINE_SOURCE != "schedule" && $CI_COMMIT_BRANCH == "master"'

deploy-dockerhub-dev:
  extends:
    - .deploy-to-dockerhub
  dependencies:
    - build-prod
  variables:
    DOCKERHUB_TAG: 'dev'
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_PIPELINE_SOURCE != "schedule" && $CI_COMMIT_BRANCH == "dev"'

deploy-dockerhub-dev-noauth:
  extends:
    - .deploy-to-dockerhub
  dependencies:
    - build-prod-noauth
  variables:
    DOCKERHUB_TAG: 'dev-noauth'
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_PIPELINE_SOURCE != "schedule" && $CI_COMMIT_BRANCH == "dev"'

deploy-dockerhub-mr-to-dev:
  extends:
    - .deploy-to-dockerhub
  dependencies:
    - build-prod
  variables:
    DOCKERHUB_TAG: $CI_COMMIT_SHORT_SHA
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "dev"'

deploy-dockerhub-mr-to-dev-noauth:
  extends:
    - .deploy-to-dockerhub
  dependencies:
    - build-prod-noauth
  variables:
    DOCKERHUB_TAG: $CI_COMMIT_SHORT_SHA-noauth
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "dev"'

retag-dockerhub-image:
  stage: deploy:retagging
  rules:
    - if: '$CI_PIPELINE_SOURCE != "schedule" && ($CI_COMMIT_BRANCH == "dev" || $CI_COMMIT_BRANCH == "master") && $CI_PIPELINE_SOURCE == "push"'
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: ['']
  script:
    - crane auth login -u $DOCKERHUB_USER -p $DOCKERHUB_PASSWORD "index.docker.io"
    - crane cp $DOCKERHUB_ORGA/$DOCKERHUB_IMAGE_NAME:$DOCKERHUB_TAG $DOCKERHUB_ORGA/$DOCKERHUB_IMAGE_NAME:$CI_COMMIT_SHORT_SHA

retag-dockerhub-image-noauth:
  stage: deploy:retagging
  rules:
    - if: '$CI_COMMIT_BRANCH == "dev" && $CI_PIPELINE_SOURCE != "schedule"'
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: ['']
  script:
    - crane auth login -u $DOCKERHUB_USER -p $DOCKERHUB_PASSWORD "index.docker.io"
    - crane cp $DOCKERHUB_ORGA/$DOCKERHUB_IMAGE_NAME:dev-noauth $DOCKERHUB_ORGA/$DOCKERHUB_IMAGE_NAME:dev-noauth-$CI_COMMIT_SHORT_SHA
